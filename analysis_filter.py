import subprocess
import glob
import numpy as np
import re
import matplotlib.pyplot as plt
import argparse
from sklearn.cluster import AgglomerativeClustering
from sklearn.neighbors import NearestCentroid
from sklearn.metrics import pairwise_distances
import sys
from matplotlib.ticker import MaxNLocator

def calculate_rmsd(file1, file2):
    """Calculate RMSD between two protein structure files."""
    # Command to run TM-score program
#    cmd = f"./TMscore -split 1 -ter 0 {file1} {file2} -seq | grep TM-score | head -n -1 | tail -n 1 | cut -f3"
    cmd = f"./TMscore -split 1 -ter 0 {file1} {file2} -seq | grep RMSD"

 # Run command and capture output
    output = subprocess.check_output(cmd, shell=True)
    print(output)
    rmsd = re.search(r'\d+\.\d+', output.decode()).group()
    rmsd=float(rmsd)
    print(rmsd)
    return rmsd

#Ask for all the needed arguments
parser=argparse.ArgumentParser(description='Program description')

parser.add_argument('--path_AF', required='True', help='Path of the PDB files')
parser.add_argument('--exp_list', required='True', help='Path of the experimental files')
parser.add_argument('--out_file', required='True', help='File name of the output')
parser.add_argument('--qmean_th', required='True', help='qmean6 threshold, value between 0 and 1')
parser.add_argument('--cluster_th', required='True', help='cluster threshold in Angstroms')
parser.add_argument('--rmsd', help='All-to-all rmsd file')
parser.add_argument('--rmsd_exp', help='Af-exp rmsd file')
parser.add_argument('--qmean_file', required='True', help='File with the QMEAN6 value for each structure')
args=parser.parse_args()



path_to_AF=args.path_AF
exp_list=args.exp_list
out_file=args.out_file
qmean_file=args.qmean_file
th=float(args.qmean_th)
cluster_th=float(args.cluster_th)
rmsd_file=args.rmsd
rmsd_total=args.rmsd_exp
# List of paths to your PDB files
pdb_files = glob.glob(path_to_AF + '/*.pdb')

#read the list of experimetnal files to be used and add them to a list
file_list=open(exp_list, 'rt')
exp_files = []
for line in file_list:
    exp_files.append(line[:-1])

print('The experimental files to be used are: ', exp_files)

#Next, we compute the all-to-all RMSD of the structures generated by AlphaFold
if rmsd_file:
    rmsd_all_to_all = np.load(rmsd_file)
else:
    rmsd_all_to_all=np.zeros((len(pdb_files), len(pdb_files)))
    for i in range(len(pdb_files)):
        for j in range(len(pdb_files)):
            rmsd_all_to_all[i][j] = calculate_rmsd(pdb_files[i], pdb_files[j])

#And now, we compute the RMSD of the AlphaFold structures compared to the experimental structures
num_AF=len(pdb_files)
num_exp=len(exp_files)
if rmsd_total:
    rmsd_AF_exp=np.load(rmsd_total)
else:
    rmsd_AF_exp=np.zeros((num_AF, num_exp))
    for i in range(num_AF):
        for j in range(num_exp):
            rmsd_AF_exp[i][j] = calculate_rmsd(pdb_files[i], exp_files[j])

# Perform Agglomerative clustering
clusters_agg = AgglomerativeClustering(n_clusters=None, distance_threshold=cluster_th, compute_full_tree=True, metric='precomputed', linkage='average').fit_predict(rmsd_all_to_all)
print(clusters_agg)

# Find the centroids
unique_labels = np.unique(clusters_agg)
centroids = []
for label in unique_labels:
    cluster_indices = np.where(clusters_agg == label)[0]
    centroid = np.mean(rmsd_all_to_all[cluster_indices], axis=0)
    centroids.append(centroid)

# Find the nearest protein to each centroid
nearest_proteins = []
for centroid in centroids:
    distances_to_centroid = np.linalg.norm(rmsd_all_to_all - centroid, axis=1)
    nearest_idx = np.argmin(distances_to_centroid)
    nearest_protein = nearest_idx  # This should be your protein index in your dataset
    nearest_proteins.append(nearest_protein)

print("Nearest protein indices to centroids:", nearest_proteins)

rmsd_centroids=np.zeros((len(nearest_proteins), num_exp))
for i in range(len(nearest_proteins)):
    for j in range(num_exp):
        rmsd_centroids[i][j]=rmsd_AF_exp[nearest_proteins[i]][j]

#Once we have the Centroids for the non-filtered structures, it's time to filter the structures by the QMEAN6 metric.
file_paths = []
qmean_scores = []
# Open and read the file
with open(qmean_file, 'r') as file:
    lines = file.readlines()

    # Loop through each line and split into path and score
    for line in lines:
        print(line)
        path, score = line.split()
        file_paths.append(path)
        qmean_scores.append(float(score))

print('len file paths: ', len(file_paths))
print(file_paths)
print('len pdb_files: ', len(pdb_files))
print(pdb_files)


pdb_files_filtered=[]
check={}
for file in pdb_files:
    check[file]=0
print(check)

#filter the structures by a given threshold
for j in range(len(file_paths)):
    if check[file_paths[j]]==1:
        continue
    else:
        check[file_paths[j]]=1
        print('qmean: ', file_paths[j])
        if qmean_scores[j]>=th:
            pdb_files_filtered.append(file_paths[j])
                

#It's time to reconsturct the RMSD matrix with just the filtered structures
rmsd_all_to_all_filtered=np.zeros((len(pdb_files_filtered), len(pdb_files_filtered)))
for i in range(len(pdb_files_filtered)):
    for j in range(len(pdb_files_filtered)):
        rmsd_all_to_all_filtered[i][j]=rmsd_all_to_all[pdb_files.index(pdb_files_filtered[i])][pdb_files.index(pdb_files_filtered[j])]

rmsd_AF_exp_filtered=np.zeros((len(pdb_files_filtered), len(exp_files)))
for i in range(len(pdb_files_filtered)):
    for j in range(len(exp_files)):
        rmsd_AF_exp_filtered[i][j]=rmsd_AF_exp[pdb_files.index(pdb_files_filtered[i])][j]

#Next, we will compute again the clusters and the centroids.
# Perform Agglomerative clustering
clusters_agg_filtered = AgglomerativeClustering(n_clusters=None, distance_threshold=cluster_th, compute_full_tree=True, metric='precomputed', linkage='average').fit_predict(rmsd_all_to_all_filtered)
print(clusters_agg_filtered)

# Find the centroids
unique_labels_filtered = np.unique(clusters_agg_filtered)
centroids_filtered = []
for label in unique_labels_filtered:
    cluster_indices_filtered = np.where(clusters_agg_filtered == label)[0]
    centroid_filtered = np.mean(rmsd_all_to_all_filtered[cluster_indices_filtered], axis=0)
    centroids_filtered.append(centroid_filtered)

# Find the nearest protein to each centroid
nearest_proteins_filtered = []
for centroid in centroids_filtered:
    distances_to_centroid = np.linalg.norm(rmsd_all_to_all_filtered - centroid, axis=1)
    nearest_idx = np.argmin(distances_to_centroid)
    nearest_protein = nearest_idx  # This should be your protein index in your dataset
    nearest_proteins_filtered.append(nearest_protein)

print("Nearest protein indices to centroids:", nearest_proteins_filtered)

rmsd_centroids_filtered=np.zeros((len(nearest_proteins_filtered), num_exp))
for i in range(len(nearest_proteins_filtered)):
    for j in range(num_exp):
        rmsd_centroids_filtered[i][j]=rmsd_AF_exp_filtered[nearest_proteins_filtered[i]][j]
        #rmsd_centroids[i][j]=rmsd_exp[i][j]

rmsd_all_to_all_centroids=np.zeros((len(nearest_proteins), len(nearest_proteins)))
for i in range(len(nearest_proteins)):
    for j in range(len(nearest_proteins)):
            rmsd_all_to_all_centroids[i][j]=rmsd_all_to_all[nearest_proteins[i]][nearest_proteins[j]]

rmsd_all_to_all_centroids_filtered=np.zeros((len(nearest_proteins_filtered), len(nearest_proteins_filtered)))
for i in range(len(nearest_proteins_filtered)):
    for j in range(len(nearest_proteins_filtered)):
            rmsd_all_to_all_centroids_filtered[i][j]=rmsd_all_to_all_filtered[nearest_proteins_filtered[i]][nearest_proteins_filtered[j]]

np.save(out_file + '_rmsd_all_to_all', rmsd_all_to_all)
np.save(out_file + '_rmsd_all_to_all_filtered', rmsd_all_to_all_filtered)
np.save(out_file + '_rmsd_AF_exp', rmsd_AF_exp)
np.save(out_file + '_rmsd_AF_exp_filtered', rmsd_AF_exp_filtered)
np.save(out_file + '_rmsd_centroids', rmsd_centroids)
np.save(out_file + '_rmsd_centroids_filtered', rmsd_centroids_filtered)

out_list=open(out_file+'_centroids_list.txt', 'wt')
for i in nearest_proteins_filtered:
    out_list.write(pdb_files_filtered[i]+'\n')
out_list.close()

#Compute the best results
best_results_exp={}
min_positions_AF_exp = np.argmin(rmsd_AF_exp, axis=0)
for i in range(num_exp):
    best_results_exp[exp_files[i]]=[pdb_files[min_positions_AF_exp[i]], rmsd_AF_exp[min_positions_AF_exp[i]][i]]

min_positions_AF_exp_pdb = np.argmin(rmsd_AF_exp, axis=1)
best_results_AF_exp_pdb={}
for i in range(len(pdb_files)):
    #best_results_AF_exp_pdb[pdb_files[nearest_proteins[i]]]=[exp_files[min_positions_AF_exp_pdb[i]], rmsd_AF_exp[i][min_positions_AF_exp_pdb[i]]]
    best_results_AF_exp_pdb[pdb_files[i]]=[exp_files[min_positions_AF_exp_pdb[i]], rmsd_AF_exp[i][min_positions_AF_exp_pdb[i]]]
best_results_centroids={}
min_positions_centroids = np.argmin(rmsd_centroids, axis=0)
for i in range(num_exp):
    best_results_centroids[exp_files[i]]=[pdb_files[nearest_proteins[min_positions_centroids[i]]], rmsd_centroids[min_positions_centroids[i]][i]]

min_positions_centroid_pdb = np.argmin(rmsd_centroids, axis=1)
best_results_centroid_pdb={}
for i in range(max(clusters_agg)+1):
    best_results_centroid_pdb[pdb_files[nearest_proteins[i]]]=[exp_files[min_positions_centroid_pdb[i]], rmsd_centroids[i][min_positions_centroid_pdb[i]]]

#We do the same for the filtered results
best_results_exp_filtered={}
min_positions_AF_exp_filtered = np.argmin(rmsd_AF_exp_filtered, axis=0)
for i in range(num_exp):
    best_results_exp_filtered[exp_files[i]]=[pdb_files_filtered[min_positions_AF_exp_filtered[i]], rmsd_AF_exp_filtered[min_positions_AF_exp_filtered[i]][i]]

min_positions_AF_exp_pdb_filtered = np.argmin(rmsd_AF_exp_filtered, axis=1)
best_results_AF_exp_pdb_filtered={}
for i in range(len(pdb_files_filtered)):
    #best_results_AF_exp_pdb_filtered[pdb_files_filtered[nearest_proteins_filtered[i]]]=[exp_files[min_positions_AF_exp_pdb_filtered[i]], rmsd_AF_exp_filtered[i][min_positions_AF_exp_pdb_filtered[i]]]
    best_results_AF_exp_pdb_filtered[pdb_files_filtered[i]]=[exp_files[min_positions_AF_exp_pdb_filtered[i]], rmsd_AF_exp_filtered[i][min_positions_AF_exp_pdb_filtered[i]]]

best_results_centroids_filtered={}
min_positions_centroids_filtered = np.argmin(rmsd_centroids_filtered, axis=0)
for i in range(num_exp):
    best_results_centroids_filtered[exp_files[i]]=[pdb_files_filtered[nearest_proteins_filtered[min_positions_centroids_filtered[i]]], rmsd_centroids_filtered[min_positions_centroids_filtered[i]][i]]

min_positions_centroid_pdb_filtered = np.argmin(rmsd_centroids_filtered, axis=1)
best_results_centroid_pdb_filtered = {}
for i in range(max(clusters_agg_filtered)+1):
    best_results_centroid_pdb_filtered[pdb_files_filtered[nearest_proteins_filtered[i]]]=[exp_files[min_positions_centroid_pdb_filtered[i]], rmsd_centroids_filtered[i][min_positions_centroid_pdb_filtered[i]]]


#We check which experimental structure is not recoverd with the method
not_represented_AF_exp=[]
list_results=[]
for value_list in  best_results_AF_exp_pdb.values():
    list_results.append(value_list[0])
for exp_structure in exp_files:
    if exp_structure not in list_results:
        not_represented_AF_exp.append(exp_structure)
fraction_AF_exp=len(not_represented_AF_exp)/len(exp_files)

not_represented_centroid=[]
list_results=[]
for value_list in  best_results_centroid_pdb.values():
    list_results.append(value_list[0])
for exp_structure in exp_files:
    if exp_structure not in list_results:
        not_represented_centroid.append(exp_structure)
fraction_centroid=len(not_represented_centroid)/len(exp_files)

not_represented_AF_exp_filtered=[]
list_results=[]
for value_list in  best_results_AF_exp_pdb_filtered.values():
    list_results.append(value_list[0])
for exp_structure in exp_files:
    if exp_structure not in list_results:
        not_represented_AF_exp_filtered.append(exp_structure)
fraction_AF_exp_filtered=len(not_represented_AF_exp_filtered)/len(exp_files)

not_represented_centroid_filtered=[]
list_results=[]
for value_list in  best_results_centroid_pdb_filtered.values():
    list_results.append(value_list[0])
for exp_structure in exp_files:
    if exp_structure not in list_results:
        not_represented_centroid_filtered.append(exp_structure)
fraction_centroid_filtered=len(not_represented_centroid_filtered)/len(exp_files)


#Now we check if the centroids are all represented by the experimental structures
not_represented_centroid_AF=[]
list_results=[]
for value_list in  best_results_centroids.values():
    list_results.append(value_list[0])
for cent in nearest_proteins:
    if pdb_files[cent] not in list_results:
        not_represented_centroid_AF.append(pdb_files[cent])
fraction_centroid_AF=len(not_represented_centroid_AF)/len(nearest_proteins)

not_represented_centroid_AF_filtered=[]
list_results=[]
for value_list in  best_results_centroids_filtered.values():
    list_results.append(value_list[0])
for centroid in nearest_proteins_filtered:
    print(centroid)
    if pdb_files_filtered[centroid] not in list_results:
        not_represented_centroid_AF_filtered.append(pdb_files_filtered[centroid])
fraction_centroid_AF_filtered=len(not_represented_centroid_AF_filtered)/len(nearest_proteins_filtered)

#Write the results in a file
results_file=open(out_file + '.txt', 'wt')
results_file.write('Global best results \n')
results_file.write('Experimental file   Best AF structure   rmsd \n')
for i in range(len(exp_files)):
    results_file.write(exp_files[i]+'   '+best_results_exp[exp_files[i]][0]+'   '+str(best_results_exp[exp_files[i]][1])+'\n')
results_file.write('PDB file   Best experimental structure   rmsd \n')
for i in range(len(pdb_files)):
    results_file.write(pdb_files[i]+'   '+best_results_AF_exp_pdb[pdb_files[i]][0]+'   '+str(best_results_AF_exp_pdb[pdb_files[i]][1])+'\n')
results_file.write('Not represented structures: '+ ', '.join(not_represented_AF_exp)+ '\n')
results_file.write('Fraction of not represented structures: '+ str(fraction_AF_exp)+'\n')
results_file.write('Experimental file   Best centroid structure   rmsd \n')
for i in range(len(exp_files)):
    results_file.write(exp_files[i]+'   '+best_results_centroids[exp_files[i]][0]+'   '+str(best_results_centroids[exp_files[i]][1])+'\n')
results_file.write('Not represented structures: '+ ', '.join(not_represented_centroid)+ '\n')
results_file.write('Fraction of not represented structures: '+ str(fraction_centroid)+'\n')
results_file.write('PDB centroid file   Best experimental structure   rmsd \n')
for i in range(max(clusters_agg)+1):
    results_file.write(pdb_files[nearest_proteins[i]]+'   '+best_results_centroid_pdb[pdb_files[nearest_proteins[i]]][0]+'   '+str(best_results_centroid_pdb[pdb_files[nearest_proteins[i]]][1])+'\n')
results_file.write('Not experimentally represented structures: '+ ', '.join(not_represented_centroid_AF)+ '\n')
results_file.write('Fraction of not represented structures: '+ str(fraction_centroid_AF)+'\n')

#We write the filtered results in the same file
results_file.write('Filtered best results \n')
results_file.write('Experimental file   Best AF structure   rmsd \n')
for i in range(len(exp_files)):
    results_file.write(exp_files[i]+'   '+best_results_exp_filtered[exp_files[i]][0]+'   '+str(best_results_exp_filtered[exp_files[i]][1])+'\n')
results_file.write('PDB file   Best experimental structure   rmsd \n')
for i in range(len(pdb_files_filtered)):
    results_file.write(pdb_files_filtered[i]+'   '+best_results_AF_exp_pdb_filtered[pdb_files_filtered[i]][0]+'   '+str(best_results_AF_exp_pdb_filtered[pdb_files_filtered[i]][1])+'\n')
results_file.write('Not represented structures: '+', '.join(not_represented_AF_exp_filtered)+ '\n')
results_file.write('Fraction of not represented structures: '+ str(fraction_AF_exp_filtered)+'\n')
results_file.write('Experimental file   Best centroid structure   rmsd \n')
for i in range(len(exp_files)):
    results_file.write(exp_files[i]+'   '+best_results_centroids_filtered[exp_files[i]][0]+'   '+str(best_results_centroids_filtered[exp_files[i]][1])+'\n')
results_file.write('Not represented structures: ' + ', '.join(not_represented_centroid_filtered)+ '\n')
results_file.write('Fraction of not represented structures: '+ str(fraction_centroid_filtered)+'\n')
results_file.write('PDB centroid file   Best experimental structure   rmsd \n')
for i in range(max(clusters_agg_filtered)+1):
    results_file.write(pdb_files_filtered[nearest_proteins_filtered[i]]+'   '+best_results_centroid_pdb_filtered[pdb_files_filtered[nearest_proteins_filtered[i]]][0]+'   '+str(best_results_centroid_pdb_filtered[pdb_files_filtered[nearest_proteins_filtered[i]]][1])+'\n')
results_file.write('Not experimentally represented structures: ' + ', '.join(not_represented_centroid_AF_filtered)+ '\n')
results_file.write('Fraction of not represented structures: '+ str(fraction_centroid_AF_filtered)+'\n')
print(best_results_exp)

print('pdb files ', len(pdb_files))
print('pdb files filtered ', len(pdb_files_filtered))

#Now, all the figures are generated

plt.title('a) '+ out_file + ' RMSD all-to-all')
plt.imshow(rmsd_all_to_all, aspect='auto', vmin=0)
plt.xlabel('AF-generated structures')
plt.ylabel('AF-generated structures')
plt.colorbar(label='RMSD (Å)')
plt.tight_layout()
plt.show()

plt.title('b) '+ out_file + ' RMSD all-to-all, filtered structures')
plt.imshow(rmsd_all_to_all_filtered, aspect='auto', vmin=0)
plt.xlabel('AF-generated structures')
plt.ylabel('AF-generated structures')
plt.colorbar(label='RMSD (Å)')
plt.tight_layout()
plt.show()

plt.title('c) '+ out_file + ' RMSD AF structures - experimental structures')
plt.imshow(rmsd_AF_exp, aspect='auto', vmin=0)
plt.xlabel('Experimental structures')
plt.ylabel('AF-generated structures')
plt.colorbar(label='RMSD (Å)')
plt.tight_layout()
plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
plt.show()

plt.title('d) '+ out_file + ' RMSD AF filtered structures - experimental structures')
plt.imshow(rmsd_AF_exp_filtered, aspect='auto', vmin=0)
plt.xlabel('Experimental structures')
plt.ylabel('AF-generated structures')
plt.colorbar(label='RMSD (Å)')
plt.tight_layout()
plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
plt.show()

plt.title('e) '+ out_file + ' RMSD AF centroids - experimental structures')
plt.imshow(rmsd_centroids, aspect='auto', vmin=0)
plt.xlabel('Experimental structures')
plt.ylabel('AF-generated structures')
plt.colorbar(label='RMSD (Å)')
plt.tight_layout()
plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
plt.show()

plt.title('f) '+ out_file + ' RMSD AF filtered centroids - experimental structures')
plt.imshow(rmsd_centroids_filtered, aspect='auto', vmin=0)
plt.xlabel('Experimental structures')
plt.ylabel('AF-generated structures')
plt.colorbar(label='RMSD (Å)')
plt.tight_layout()
plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
plt.show()

plt.title('g) '+ out_file + ' RMSD all-to-all centroids')
plt.imshow(rmsd_all_to_all_centroids, aspect='auto', vmin=0)
plt.xlabel('AF-generated structures')
plt.ylabel('AF-generated structures')
plt.colorbar(label='RMSD (Å)')
plt.tight_layout()
plt.show()

plt.title('h) '+ out_file + ' RMSD all-to-all centroids filtered')
plt.imshow(rmsd_all_to_all_centroids_filtered, aspect='auto', vmin=0)
plt.xlabel('AF-generated structures')
plt.ylabel('AF-generated structures')
plt.colorbar(label='RMSD (Å)')
plt.tight_layout()
plt.show()
